// 防抖是指在一段时间内，如果连续触发同一个事件，则只执行最后一次，中间的所有操作都会被忽略。例如，当用户在输入框中输入文字时，如果每次输入都触发搜索操作，则会造成性能问题，因此可以使用防抖技术，等待用户停止输入一段时间后再触发搜索操作。
function debounce(fn, delay) {
    let timer = null
    return function(...args) {
      clearTimeout(timer)
      timer = setTimeout(() => {
        fn.apply(this, args)
      }, delay)
    }
  }
//   这个函数接收一个函数 fn 和一个延迟时间 delay，返回一个新的函数。当调用这个新函数时，它会等待一段时间后执行 fn 函数，如果在这段时间内再次调用新函数，则会重置定时器，从而实现防抖的效果。
//   防抖的应用场景包括：输入框搜索、页面滚动事件、窗口大小调整事件等。
  
//   节流是指在一段时间内，不论触发多少次事件，只执行一次操作。例如，当用户在页面上拖动元素时，如果每次移动都触发操作，则会造成性能问题，因此可以使用节流技术，在一定时间内只执行一次操作。
function throttle(fn, delay) {
    let timer = null
    return function(...args) {
      if (!timer) {
        timer = setTimeout(() => {
          fn.apply(this, args)
          timer = null
        }, delay)
      }
    }
  }
//   这个函数接收一个函数 fn 和一个延迟时间 delay，返回一个新的函数。当调用这个新函数时，它会在一段时间内只执行一次 fn 函数，如果在这段时间内再次调用新函数，则会被忽略。
//   节流的应用场景包括：页面滚动事件、窗口大小调整事件、鼠标移动事件等。
// 总结：防抖和节流都是优化 JavaScript 函数的常用技术，它们可以有效避免函数被频繁调用造成的性能问题。防抖和节流的应用场景不同，具体可以根据实际情况选择使用。