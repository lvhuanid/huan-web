// 在 TypeScript 开发中，常用的类型操作符有很多，以下是一些比较常见的：

// -typeof：用于获取一个值的类型。
// -keyof：用于获取一个类型的所有键的联合类型。
// -extends：用于实现类型的继承和扩展。
// -in：用于判断一个属性是否存在于一个类型中。
// -as：用于类型断言，可以将一个值强制转换为指定类型。
// -instanceof：用于判断一个对象是否是某个类的实例。
// -never：表示那些不应该出现的类型。
// -Partial：用于将一个类型的所有属性变为可选属性。
// -Required：用于将一个类型的所有属性变为必选属性。
// -Pick：用于从一个类型中选择部分属性来构建一个新类型。
// -Omit：用于从一个类型中排除部分属性来构建一个新类型。

// 除此之外，还有一些高级的类型操作符，例如 Exclude、Extract、NonNullable 等，它们在一些特定的场景下非常有用。
// 在实际开发中，具体使用哪些类型操作符，需要根据具体场景和需求来决定。

// 冒号 : 是类型注解的语法符号，用于指定变量、函数参数、函数返回值等的类型
// |：用于表示联合类型，例如 string | number 表示字符串类型或数字类型。
// &：用于表示交叉类型，例如 type A = { x: number } & { y: string } 表示同时具有 x 属性和 y 属性的类型。
// []：用于表示数组类型，例如 number[] 表示数字类型的数组。
// ()：用于表示函数类型，例如 (a: number, b: number) => number 表示接受两个数字类型的参数并返回数字类型的函数。
// {}：用于表示对象类型，例如 { x: number, y: string } 表示具有 x 属性和 y 属性的对象类型。

let num: number = 123;
function add(a: number, b: number): number {
  return a + b;
}
